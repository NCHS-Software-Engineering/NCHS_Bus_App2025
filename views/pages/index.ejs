<!DOCTYPE html>
<html>
    <head>
        <title>NCHS Bus Status Page</title>

        <link rel="icon" type="image/png" href="/images/Naperville_Central_Logo.png">

        <!-- Latest compiled and minified CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">

        <!-- Latest compiled JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

        <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js" type="module"></script>
        <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-messaging.js" type="module"></script>
    

        <link href="https://cdn.syncfusion.com/ej2/22.1.34/ej2-icons/styles/bootstrap5.css" rel="stylesheet"/>
        <link href="https://cdn.syncfusion.com/ej2/22.1.34/ej2-icons/styles/material.css" rel="stylesheet"/>

        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="referrer" content="no-referrer-when-downgrade" />
        <meta name="google-site-verification" content="Ylp0UBYDFaaNsDJs8DcM8Cw1ImHAHrgMfkQmdg7Y2As" />
        <meta name="description" content="Displays the Statuses of Busses at NCHS after school days.">
        
        <link rel="stylesheet" href="/css/index.css">
    </head>

    <body>
        <nav id="navbar" class="navbar navbar-expand navbar-dark">
            <a class="navbar-brand">
                <img src="/images/Naperville_Central_Logo.png" id = "nchsLogo" alt="NCHS Logo">
            </a>
            <h1>NCHS Bus Status Page<br></h1>
            
            <div class="navbar-nav ms-auto">
                <div id="g_id_onload"
                    data-client_id="790808137804-5os0c3tvpvlc3jk5lnid1fla44e9qd0k.apps.googleusercontent.com"
                    data-context="signin"
                    data-ux_mode="redirect"
                    data-login_uri="https://nchsbusapp.org/auth"
                    data-auto_prompt="false">
                </div>
                <div><button id="permission"type="button">ðŸ””</button></div>
                <div class="g_id_signin"
                    data-type="standard"
                    data-shape="rectangular"
                    data-theme="outline"
                    data-text="signin"
                    data-size="large"
                    data-logo_alignment="left"
                    style="margin-right: 10px;">
                </div>
            </div>
        </nav>
        <div id="returntohome" onclick="location.href='/'"></div> 
        <script type="module">
            import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
            import { getMessaging, getToken, onMessage } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-messaging.js";

            const firebaseConfig = {
                apiKey: "AIzaSyDtqhN1RQkLp-g-IjQWPJs6CudIysqH8BU",
                authDomain: "nchs-bus-app.firebaseapp.com",
                projectId: "nchs-bus-app",
                storageBucket: "nchs-bus-app.firebasestorage.app",
                messagingSenderId: "488283227454",
                appId: "1:488283227454:web:3c0e60d5e474392fb1986f",
                measurementId: "G-TGBYMSQ1BY"
            };

            // Initialize Firebase
            const app = initializeApp(firebaseConfig);
            const messaging = getMessaging(app);

            // Asks for Notification Permission
            async function requestPermission() {
            try {
                const permission = await Notification.requestPermission();
                if (permission === "granted") {
                    console.log("Notification permission granted.");
                    new Notification ('Star a Bus', {
                        body: "You will only receive notifications for the busses you star. :)"
                    })
                    getFCMToken(); // Fetch FCM Token
                } else {
                console.log("Notification permission denied.");
                }
            } catch (error) {
                console.error("Error requesting permission:", error);
            }
            }

            // Get FCM Token
            async function getFCMToken() {
            try {
                const token = await getToken(messaging, { vapidKey: "BFczqoG5aFc4UK24ZfURzutR3ZCrfzGIjQL953JEFU78YxwimYfmVoLG_CEch8OqSkCpG3C-fkxDg_V2aJlckXs" });
                if (token) {
                console.log("FCM Token:", token);
                // You can send this token to your backend for future notifications
                } else {
                console.log("No registration token available.");
                }
            } catch (error) {
                console.error("Error getting token:", error);
            }
            }

            // Handle Incoming Notifications
            onMessage(messaging, (payload) => {
                console.log("Message received:", payload);
                new Notification(payload.notification.title, {
                    body: payload.notification.body,
                    icon: payload.notification.icon
                });
            });

            if ("serviceWorker" in navigator) {
                navigator.serviceWorker.register("/firebase-messaging-sw.js")
                .then((registration) => {
                console.log("Service Worker registered with scope:", registration.scope);
                })
                .catch((error) => {
                console.error("Service Worker registration failed:", error);
                }); 
            }

            navigator.serviceWorker.ready
                .then(function(registration) {
                // Use the PushManager to get the user's subscription to the push service.
                    return registration.pushManager.getSubscription()
                .then(async function(subscription) {
                    // If a subscription was found, return it.
                    if (subscription) {
                        return subscription;
                    }

                    // Get the server's public key
                    const response = await fetch('/vapidPublicKey');
                    const vapidPublicKey = await response.text();
                    // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
                    // urlBase64ToUint8Array() is defined in /tools.js
                    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

                    // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
                    // send notifications that don't have a visible effect for the user).
                    return registration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: convertedVapidKey
                    });
                });
                }).then(function(subscription) {
                // Send the subscription details to the server using the Fetch API.
                    fetch('./check-subscription',{
                        method: 'post',
                        headers: {
                            'Content-type': 'application/json',
                        },
                        body: JSON.stringify({
                            subscription:subscription,
                        }),
                    })
                        .then(response => response.json())
                        .then(data => {
                            if(!data.exists){
                                fetch('./register', {
                                    method: 'post',
                                    headers: {
                                    'Content-type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                    subscription: subscription
                                }),
                            });
                            }
                        })

                });
                // safari compatibility
                if ('safari' in window && 'pushNotification' in window.safari) {
                    console.log("Safari push notifications are supported!");

                    // Ask for permission
                    window.safari.pushNotification.requestPermission(
                        "https://your-server.com", // Your web server
                        "web.com.yourdomain.push", // Your Web Push ID from Apple
                        {},
                        function(permissionData) {
                            if (permissionData.permission === 'granted') {
                                console.log("Push Token:", permissionData.deviceToken);
                                // Send this deviceToken to your backend
                                fetch('/register-ios-token', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ token: permissionData.deviceToken })
                                });
                            } else {
                                console.log("Push permission denied:", permissionData);
                            }
                        }
                    );
                } else {
                    console.log("Safari push notifications are NOT supported on this browser.");
                }
            function urlBase64ToUint8Array(base64String) {
                var padding = '='.repeat((4 - base64String.length % 4) % 4);
                var base64 = (base64String + padding)
                    .replace(/\-/g, '+')
                    .replace(/_/g, '/');
                
                var rawData = window.atob(base64);
                var outputArray = new Uint8Array(rawData.length);
                
                for (var i = 0; i < rawData.length; ++i) {
                    outputArray[i] = rawData.charCodeAt(i);
                }
                return outputArray;
            }

            // Request permission on page load
            const permbutton = document.getElementById('permission');
            permbutton.addEventListener('click', function(){
                requestPermission();   
            })
                
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                //let starredBusses = [];
                
                // Check if cookies exist
                const starredBussesString = getCookie('starredBusses');
                //console.log(starredBusses);
                let starredBussesArray = [] ;
                if(starredBussesString != undefined){
                    starredBussesArray=   JSON.parse(starredBussesString)
                }


                fetch('/getbus')
                    .then(response => { 
                        if(response.ok) {
                            return response.json(); // not important
                        }
                    }).then(data => {
                        if(data) {
                            //console.log(findSmallest())
                            
                            let i = 1
                            let busses = data.buslist;
                            let table = document.getElementById('busTable');;
                            let item = document.getElementById('star-selector');
                            table.setAttribute('id', 'myTable'); // Set an ID for the table
                            //console.log(busses.length)
                            //console.log(starredBussesArray.length)
                            for(var v = starredBussesArray.length - 1; v>=0; v--){
                                while(i < busses.length + 1) { // busses[i]

                                    smallestBus = data.buslist[0].number;
                                    highestBus = data.buslist[busses.length - 1].number
                                
                                    let row = table.rows[i];
                                    var initelement = row.cells[0]
                                    var intValue = parseInt(initelement.textContent.trim(), 10);

                                    if(intValue == starredBussesArray[v]){
                                        const table = row.parentNode.parentNode;
                                        //console.log(table)
                                        //console.log(starredBussesArray[v])
                                        starredBusses.add(starredBussesArray[v])
                                        //console.log(starredBusses);
                                        starredBussesArray.pop();

                                        var element = row.cells[4].querySelector('span.starring');
                                        
                                        element.style.backgroundColor = 'yellow';
                                        element.style.border = '2px solid black';
                                        
                                        //table.insertBefore(row, row.firstChild);
                                        let tbody = table.querySelector('tbody');
                                        tbody.insertBefore(row, tbody.children[1]);
                                    }
                                    i++;
                                }//end of while loop
                                i = 1;
                            }
                        }});
              
                           
            

            

          /*  for(var v = starredBussesArray.length - 1; v>=0; v--){

                starredBusses.add(starredBussesArray[v]);
                const busRows = document.querySelectorAll('bus-table tr:not(:first-child)'); // Exclude the first row (header)
                console.log(busRows)
                busRows.forEach(row => {
                    const busNumber = parseInt(row.cells[0].textContent.trim()); // Assuming bus number is in the first cell
                    console.log(busNumber)
                    const starringButton = row.querySelector('.starring'); // Assuming each row has a starring button
                    // Check if the bus is starred
                    if (starredBussesArray.includes(busNumber)) {
                        // Apply starred styles to the button
                        starringButton.style.backgroundColor = 'yellow';
                        starringButton.style.border = '2px solid black';
                        console.log(starringButton.style.border)
                    } else {
                        // Apply unstarred styles to the button
                        starringButton.style.backgroundColor = 'white';
                        starringButton.style.border = '1px solid black';
                    }
                });*/
     
                                   /* let i = 0;
            
                        
                                let busses = data.buslist;
                                let table = document.getElementById('busTable');
                                let item = document.getElementById('star-selector');
            



                                while(i < busses.length) {
                                    let row = table.rows[i];
                                    var initelement = row.cells[0]
                                    var intValue = parseInt(initelement.textContent.trim(), 10);

                                    if(intValue == starredBussesArray[v]){
                                        starredBusses.add(starredBussesArray[v])
                                        starredBussesArray.pop();

                                        var element = row.cells[4].querySelector('span.starring');
                                        
                                        element.style.backgroundColor = 'yellow';
                                        element.style.border = '2px solid black';
                                        
                                        table.insertBefore(row, table.firstChild.nextSibling);


                                    }
                                }*/




                           // }
                     



                

            
            
    });
            var starredBusses = new Set([]);
            var lowestBus = 0;
            var factor = 10000;
            var highestBus = 0;
            
            
            let table = document.getElementById('busTable');
            
            //var tabelElement = table.rows.cells[0]
            //var tableValue = parseInt(tableElement.textContent.trim(), 10);
            //console.log(tabelValue)

            


         
            
            function getCookie(name) {
                const cookieString = document.cookie;
                const cookies = cookieString.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    // Check if this cookie contains the name we're looking for
                    if (cookie.startsWith(name + '=')) {
                        // If it does, return the cookie value
                        return cookie.substring(name.length + 1);
                    }
                }
                // If the cookie with the specified name is not found, return null
                return null;
            }
            
            function updateCookie() {
                // Convert starredBusses set to an array and then to a string
                const starredBussesArray = Array.from(starredBusses);
                const starredBussesString = JSON.stringify(starredBussesArray);
                // Set the cookie with the name 'starredBusses' and the value as the stringified array
                // NEW CHNAGE -- not in ORIGINAL STARRED BUSSES
                const expirationDate = new Date();
                expirationDate.setFullYear(expirationDate.getFullYear() + 10); // 10 years from now

                //for local host below
                document.cookie = `starredBusses=${starredBussesString}; expires=${expirationDate.toUTCString()}; SameSite=None; Secure;`;
                //     for dev:           document.cookie = `starredBusses=${starredBussesString}; expires=${expirationDate.toUTCString()}; SameSite=None; Secure; domain=https://bus-dev.redhawks.us/`;

                //console.log('starredBusses cookie value:', starredBussesString);
       
                //console.log(starredBussesArray)
            }

            function getStarredBussesArray(starredBussesString) {
                 // Parse the JSON string to convert it back to an array
            }
            

            //updates the bustable after reciving the message from ws
            function updateTable(message) {
                let table = document.getElementById('myTable');
                if (!table) {
                    console.error('Table with id "busTable" not found!');
                    return;
                }

                // Clear existing rows except for the header
                while (table.rows.length > 1) {
                    table.deleteRow(1);
                }

                // Add new rows
                message.buslist.forEach((bus) => {
                    let row = table.insertRow(-1);

                    row.insertCell(0).innerHTML = bus.number;
                    row.insertCell(1).innerHTML = bus.change;
                    row.insertCell(2).innerHTML = bus.status;
                    row.insertCell(3).innerHTML = bus.timestamp;
                    row.insertCell(4).innerHTML = "<span id='star-selector' class='e-icons e-medium e-star-filled starring'></span>";

                    let starButton = row.cells[4].querySelector('span.starring');
                    starButton.style.backgroundColor = 'white';
                    starButton.style.border = '1px solid black';

                    row.addEventListener('click', function(event) {
                    starred();
                    });
                });
                }

            /*function updateTable(message){
                let busses = message;
                fetch('/getbus')
                    .then(response => { 
                        if(response.ok) {
                            return response.json(); // not important
                        }
                    }).then(data => {
                        if(data) {
                            if(busses){
                                let table = document.getElementById('busTable');
                                if(table){       
                                    for(let i = 1; i <= busses.length+1; i++){
                                        //console.log(table.rows);
                                        let row = table.rows[i];
                                        if(row){
                                            row.cells[0].innerHTML = busses[i-1].number;
                                            row.cells[1].innerHTML = busses[i-1].change;
                                            row.cells[2].innerHTML = busses[i-1].status;
                                            row.cells[3].innerHTML = busses[i-1].timestamp;
                                            
                                            
                                        }
                                        if(starredBusses.has(tableValue)){
                                            starredBusses.delete(tableValue);
                                            starred();

                                        }
                                    }
                                    console.log("Bus Table updated");
                                }
                                else{
                                    console.log("No table 'busTable' found");
                                    }

                            }else{
                                console.error("Invalid data recived from websocket:" ,message);
                }}});
            }*/
            
            function updateStarredUI() {
                const row1 = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                    var element = row1.cells[4].querySelector('span.starring');
                    
                    element.style.backgroundColor = 'yellow';
                    element.style.border = '2px solid black';
                    


                    var table = document.createElement('table');
                            table.setAttribute('id', 'myTable'); // Set an ID for the table
                        fetch('/getbus')
                        .then(response => { 
                            if(response.ok) {
                                return response.json(); // not important
                            }
                        }).then(data => {
                            if(data) {
                                let i = 0;
            
                                let busses = data.buslist;
                                let table = document.getElementById('busTable');
                                let item = document.getElementById('star-selector');

                                while(i < busses.length) { // busses[i]
                                    let row = table.rows[i];
                                    var initelement = row.cells[0]
                                    var intValue = parseInt(initelement.textContent.trim(), 10);
                                    
                                    if(starredBussesString.has(intValue)){
                                        table.insertBefore(row, table.firstChild.nextSibling);

                                        //console.log('lol')
                                    }
                                    
                                 }
                            }
                        });
            }

            function makeTable() {

                var table = document.createElement('table');

                table.setAttribute('id', 'myTable'); // Set an ID for the table
                fetch('/getbus')
                .then(response => { 
                if(response.ok) {
                    return response.json(); // not important
                }
                }).then(data => {
                    if(data) { // if there is data
                        let i = 0;


                        let busses = data.buslist;
                        let table = document.getElementById('busTable');
                        let item = document.getElementById('star-selector');
                        //console.log("bus table:" + table);

                        while(i < busses.length) { // busses[i]
                            let row = table.insertRow(-1);
                        
                            row.insertCell(0).innerHTML = busses[i].number;
                            row.insertCell(1).innerHTML = busses[i].change;
                            row.insertCell(2).innerHTML = busses[i].status;
                            row.insertCell(3).innerHTML = busses[i].timestamp;
                            row.insertCell(4).innerHTML = "<span id = 'star-selector' class='e-icons e-medium e-star-filled starring'></span>";
                            row.addEventListener('click', function(event){

                                starred();
                            });
                            i++;
                        }
                    }
                });
            }


            function fetchBusses() {
                fetch('/getbus')
                .then(response => { 
                    if(response.ok) {
                        return response.json(); // not important
                    }
                }).then(data => {
                    if(data) { // if there is data
                        let i = 1;
                        let busses = data.buslist;
                        let table = document.getElementById('busTable');
                        let item = document.getElementById('star-selector');
                        

                        while(i < busses.length) { // busses[i]
                            //console.log(i);
                            //console.log("Busses.length: " + busses.length);
                            let row = table.rows[i];
                            row.cells[0].innerHTML = busses[i-1].number;
                            row.cells[1].innerHTML = busses[i-1].change;
                            row.cells[2].innerHTML = busses[i-1].status;
                            row.cells[3].innerHTML = busses[i-1].timestamp;
                            
                            if(starredBusses.has(tableValue)){
                                starredBusses.delete(tableValue);
                                starred();

                            }     
                            i++;
                        }
                        item.classList.add('starred-factor');           
                    }
                });
            }
                    </script>
        <table id="busTable"  class="bus-table">
            <tr>
                <th>Bus Number</th> 
                <th>Bus Changes</th>
                <th>Current Status</th>
                <th>Time</th>
                <th></th>
            </tr>

        </table>

        <p style="text-align: center; color: grey;"><small>Version 1 Created by Simi Kama ('23), Adesh Kumar ('23), Theodore Ng ('23), </small><small onclick="hmm()">Alex Remiasz ('23), </small><small> and Boris Rokhmanov ('23)<br>
        <small>Version 2 Created by Vinay Narahari ('24), Tyler Browning ('24), and Peter Paik ('24)</small><br>
        <small>Version 3 Created by  Priya Agrawal ('25), Ryan Keough ('25), and Andy Liang ('26)</small></p>

        

        <script>
            const socket = new WebSocket("ws://localhost:8080/ws/"); // Connect to WebSocket server
            //const socket = new WebSocket("wss://nchsbusapp.org/ws/"); // Connect to WebSocket server
            //const socket = new WebSocket("wss://bustest.redhawks.us/ws/");


            socket.addEventListener("open", () => {
            //console.log("Connected to WebSocket server");
            });

            // Listen for messages from the server
            socket.addEventListener('message', (event) => {
                //console.log('WebSocket message received:', event.data);
            
                // Parse the received data
                let data;
                try {
                    data = JSON.parse(event.data);
                    console.log('Received data:', data);
                } catch (e) {
                    console.error('Error parsing WebSocket message:', event.data);
                    return;
                }
            
                // Update the buses if buslist is included in the message
                //if (data.buslist) {
                updateTable(); // Renders updated bus list
                let previousStatus = {};
                //}
                  // Check if the user has starred the bus
                    const starredBuses = JSON.parse(localStorage.getItem('starredBuses'));
                    console.log(starredBuses);
                    if (starredBuses && starredBuses.includes(data.number)) {
                        // Send notification for starred bus!
                        if (Notification.permission === 'granted'){
                            let body;

                            // Check if the bus number has changed
                            if (data.change && data.change !== "" && data.change !== data.number) {
                                body = `Bus #${data.number}, which is Bus #${data.change} today, has ${data.status}!`;
                            } else {
                                body = `Bus #${data.number} has ${data.status}!`;
                            }
                            new Notification ('Bus Update', {
                                body
                            });
                            
                            // By assigning busses[i].status to previousStatus[busses[i].number], we are updating the previousStatus object to reflect the current status of the bus.
                            //what is this????????????????
                            //previousStatus[busses[i].number] = busses[i].status;
                        }
                    } 
                    });

            //let starredBusNumbers = new Set(); // Store starred buses globally
            function updateTable() {
                let table = document.getElementById('myTable');
                if (!table) {
                    console.error('Table with id "busTable" not found!');
                    return;
                }

                // Clear existing rows except for the header
                while (table.rows.length > 1) {
                    table.deleteRow(1);
                }

                fetch('/getbus')
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                    })
                    .then(data => {
                        if (data) {
                            let busses = data.buslist;

                            // First, add starred buses to the table
                            for (let i = 0; i < busses.length; i++) {
                                if (starredBusses.has(busses[i].number)) {
                                    let row = table.insertRow(-1);

                                    row.insertCell(0).innerHTML = busses[i].number;
                                    row.insertCell(1).innerHTML = busses[i].change;
                                    row.insertCell(2).innerHTML = busses[i].status;
                                    row.insertCell(3).innerHTML = busses[i].timestamp;
                                    row.insertCell(4).innerHTML = "<span id='star-selector' class='e-icons e-medium e-star-filled starring'></span>";

                                    let starButton = row.cells[4].querySelector('span.starring');
                                    starButton.style.backgroundColor = 'yellow';
                                    starButton.style.border = '2px solid black';

                                    row.addEventListener('click', function(event) {
                                        starred();
                                    });
                                }
                            }
                    
                
                            // Then, add non-starred buses to the table
                            for (let i = 0; i < busses.length; i++) {
                                if (!starredBusses.has(busses[i].number)) {
                                    let row = table.insertRow(-1);

                                    row.insertCell(0).innerHTML = busses[i].number;
                                    row.insertCell(1).innerHTML = busses[i].change;
                                    row.insertCell(2).innerHTML = busses[i].status;
                                    row.insertCell(3).innerHTML = busses[i].timestamp;
                                    row.insertCell(4).innerHTML = "<span id='star-selector' class='e-icons e-medium e-star-filled starring'></span>";

                                    row.addEventListener('click', function(event) {
                                        starred();
                                    });
                                }
                            }
                        }
                    });
            }



        </script>

        <!--Notifiactions Stuff
        <script>
            const button = document.getElementById("notifications");
            document.addEventListener("DOMContentLoaded", () => {
                Notification.requestPermission()
            });
            button.addEventListener("click", () => {
                if (Notification.permission === 'granted'){
                    new Notification ('Hello from your webAkp1pjo!', {
                        body: "asdlkasjdlkasjdlkasjdlkajsldkajsldjal"
                    })
                }
            });

            navigator.serviceWorker.register("service-worker.js").then((registration) => {
                return registration.pushManager.getSubscription().then(/* ... */);
            });


            self.addEventListener("push", (res) =>{

            });
        </script>-->

        <script>
            makeTable();
            var smallestBus = 0;

            function starred(){ //add isStarred
                findSmallest();
                findHighest();
                //console.log(starredBusses + "**************")
                const buttons = document.querySelectorAll('.starring');
                const clickedButton = event.target;
                //console.log(clickedButton)
                const row = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                //console.log(row)
                var initelement = row.cells[0]
                var intValue = parseInt(initelement.textContent.trim(), 10);
                const table = row.parentNode; // Get the table element
                //console.log(intValue)
                let noOtherStars = false;


                if(!(starredBusses.has(intValue))){
                    starredBusses.add(intValue);
                    //Vinay is here!!
                    fetch('/getbus')
                        .then(response => { 
                        if(response.ok) {
                            return response.json(); // not important
                        }
                        }).then(data => {

                            /*if(starredBusses.size == data.buslist.length){
                                document.querySelector('h1').textContent = "Is Starring Done?";
                            }*/
                        })


                    updateCookie();
                    const row1 = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                    var element = row1.cells[4].querySelector('span.starring');
                    
                    element.style.backgroundColor = 'yellow';
                    element.style.border = '2px solid black';
                    
                    table.insertBefore(row, table.firstChild.nextSibling);
                }else {

                    let check = false;
                    let v = 0;
                    
                    while(!check && v < table.rows.length) { // busses[i]{
                        
                        if(table.rows[v] == null){
                            var initelement1 = null;
                        }else{
                            let rowint = table.rows[v]; 
                            var initelement1 = rowint.cells[0];
                            var intValue1 = parseInt(initelement1.textContent.trim(), 10);
                            //console.log("(((((((((" + intValue1)
                        }
                    
                        findSmallest()
                        
                        //console.log(intValue1)
                        //console.log(intValue)
                        //console.log(smallestBus)
                        //console.log( parseInt(table.rows[v+1].cells[0].textContent.trim(), 10)) // === undefined)

                        if(intValue === smallestBus){
                            check = true;
                        }else if(intValue === highestBus){
                            check = true;
                        }else if(!(starredBusses.has(intValue1)) || isNaN(parseInt(table.rows[v+1].cells[0].textContent.trim(), 10))){
                           //console.log(parseInt(table.rows[v+1].cells[0].textContent.trim(), 10))
                            let rowint1 = table.rows[v+1]; 
                            var initelement2 = rowint1.cells[0];
                            var intValue2 = parseInt(initelement2.textContent.trim(), 10);

                            if(intValue1 < intValue && intValue < intValue2){
                                check = true;
                                //console.log(intValue1);
                            }
                      //  v++;
                            
                        }else{
                            check =  true;
                            noOtherStars = true;

                        }// CASE SHOULD BE SET AFTER FIXING CURRENT STARRING ISSUE
                        v++;

                    }

                    const rowReference = table.rows[v];
                    //console.log(rowReference)
                    
                    starredBusses.delete(intValue)
                    updateCookie();
                    //console.log()
                    //table.insertBefore(row, rowReference.nextSibling);
            
                    if(noOtherStars||intValue == highestBus){
                        table.appendChild(row);
                    }else{
                        rowReference.insertAdjacentElement('beforebegin', row);

                    }


                    const row1 = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                    
                    var element = row1.cells[4].querySelector('span.starring');
                    
                    element.style.backgroundColor = 'white';
                    element.style.border = '1px solid black';

                // console.log(location.reload())
                    //location.reload();

        }
            
        /*const userId = getCookie('c_email');

        if (userId) {
            const starredBuses = JSON.parse(fs.readFileSync('starredBuses.json', 'utf8'));
            if (!starredBuses.users[userId]) {
            starredBuses.users[userId] = [];
            }
            starredBuses.users[userId].push(busNumber);
            fs.writeFileSync('starredBuses.json', JSON.stringify(starredBuses));
            }*/

        const busNumber = parseInt(row.cells[0].textContent.trim(), 10);
        const starredBuses = JSON.parse(localStorage.getItem('starredBuses')) || [];
        if (starredBuses.includes(busNumber)) {
            starredBuses.splice(starredBuses.indexOf(busNumber), 1);
        } else {
            starredBuses.push(busNumber);
        }
        localStorage.setItem('starredBuses', JSON.stringify(starredBuses));
     }
        

        
            /*/*else{
                            check = true;
                            noOtherStars = true;
                        } CASE SHOULD BE SET AFTER FIXING CURRENT STARRING ISSUE*/
                      //  v++;
            
            function getRandomInt(max) {
                return Math.floor(Math.random() * max);
            }
            function hmm() {
                let c1 = getRandomInt(255)
                let c2 = getRandomInt(255)
                let c3 = getRandomInt(255)
                document.body.style.backgroundColor = "rgb("+(c1+50)+", "+(c2+50)+", "+(c3+50)+")"
                document.getElementById('navbar').style.backgroundColor = "rgb("+c1+", "+c2+", "+c3+")"
                document.querySelectorAll('th').forEach(cell=>{
                    cell.style.backgroundColor = "rgb("+c1+", "+c2+", "+c3+")"
                })
                document.querySelectorAll('tr').forEach(cell=>{
                    cell.onmouseover = function() {
                        c1 = getRandomInt(255)
                        c2 = getRandomInt(255)
                        c3 = getRandomInt(255)
                        cell.style.backgroundColor = "rgb("+c1+", "+c2+", "+c3+")"
                    }
                })
            }


            function findSmallest() {
                fetch('/getbus')
                .then(response => { 
                    if(response.ok) {
                        return response.json(); // not important
                    }
                    }).then(data => {
                    if(data) { // if there is data
                        smallestBus = data.buslist[0].number;
                        //console.log(smallestBus)
                
                    }
                }).catch(err => console.error(err));
            }

            function findHighest() {
                fetch('/getbus')
                .then(response => { 
                    if(response.ok) {
                        return response.json(); // not important
                    }
                    }).then(data => {
                    if(data) { // if there is data
                        var num = 0;
                        var i =0;
                        while(i<data.buslist.length){
                            if(data.buslist[i].number > num){
                                highestBus = data.buslist[i].number;
                            }
                            i++;
                        }
                
                    }
                }).catch(err => console.error(err));
            }


           // document.addEventListener('DOMContentLoaded', function() {

//starred();

        </script>
        
        <!-- Google sign in script-->
        <script src="https://accounts.google.com/gsi/client" async defer></script>

        
    </body>
</html>