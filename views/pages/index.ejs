<!DOCTYPE html>
<html>
    <head>
        <title>NCHS Bus Status Page</title>

        <link rel="icon" type="image/png" href="/images/Naperville_Central_Logo.png">

        <!-- Latest compiled and minified CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">

        <!-- Latest compiled JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    

        <link href="https://cdn.syncfusion.com/ej2/22.1.34/ej2-icons/styles/bootstrap5.css" rel="stylesheet"/>
        <link href="https://cdn.syncfusion.com/ej2/22.1.34/ej2-icons/styles/material.css" rel="stylesheet"/>

        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="referrer" content="no-referrer-when-downgrade" />
        <meta name="google-site-verification" content="Ylp0UBYDFaaNsDJs8DcM8Cw1ImHAHrgMfkQmdg7Y2As" />
        <meta name="description" content="Displays the Statuses of Busses at NCHS after school days.">
        

        <style>
            @import "../node_modules/@syncfusion/ej2-icons/material.css";
            html {
                height: 100%;
            }          
            body {
                height: 100%;
                margin: 0;
                background-repeat: no-repeat;
                background-attachment: fixed;
                background-color: rgb(249, 254, 255);
                /*background: linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(204,204,204,1) 100%);*/
            }
            h1, a {
                color: white;
                font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            }

            table, th, td{
                /*border: 1px solid;*/
                border-bottom: 1px solid rgb(0,0,0);
                padding: 5px;
                margin-left: auto;
                margin-right: auto;
                width: 85%;
                border-collapse: collapse;
                
                table-layout: fixed;
                margin-top: 15px;
                margin-bottom: 15px;
            
                
            }
            .e-star-filled{
                border: 1px solid;
                color: black;
            
            }

            .e-star-filled:hover{
                background-color: yellow;            
            }
                /*
            table.PerformanceTable {
                table-layout: fixed; 
                width: 500px; 
            }
            table.PerformanceTable tr.PerformanceCell {
                width: 75px;
            }*/
            tr:nth-child(even){background-color: #ebebeb;}
            tr:hover {background-color: #ff928e;}
            th{background-color: rgb(230, 55, 72); color: black;}
        </style>
    </head>

    <body>
        <nav id="navbar" class="navbar navbar-expand navbar-dark" style="box-shadow: 0px 0px 20px rgb(18, 18, 18); background-color: rgb(220, 53, 69);">
            <a class="navbar-brand">
                <img src="/images/Naperville_Central_Logo.png" alt="NCHS Logo" style="width: 80px;">
            </a>
            <h1>NCHS Bus Status Page<br><span style="font-size: medium;">Tap Logo to Refresh</span></h1>
            
            <div class="navbar-nav ms-auto">
                <div id="g_id_onload"
                    data-client_id="790808137804-5os0c3tvpvlc3jk5lnid1fla44e9qd0k.apps.googleusercontent.com"
                    data-context="signin"
                    data-ux_mode="redirect"
                    data-login_uri="https://nchsbusapp.org/auth"
                    data-auto_prompt="false">
                </div>

                <div class="g_id_signin"
                    data-type="standard"
                    data-shape="rectangular"
                    data-theme="outline"
                    data-text="signin"
                    data-size="large"
                    data-logo_alignment="left"
                    style="margin-right: 10px;">
                </div>
            </div>
        </nav>


            <div id="returntohome" style="position:absolute; top: 0px; height: 116px; width:50%; cursor: pointer;" onclick="location.href='/'"></div>


        <script>
              document.addEventListener('DOMContentLoaded', function() {
                //let starredBusses = [];
                
                // Check if cookies exist
                const starredBussesString = getCookie('starredBusses');
                console.log(starredBusses);
            let starredBussesArray = [] ;
            if(starredBussesString != undefined){
                starredBussesArray=   JSON.parse(starredBussesString)
            }



         
                        fetch('/getbus')
                        .then(response => { 
                            if(response.ok) {
                                return response.json(); // not important
                            }
                        }).then(data => {
                            if(data) {
                                console.log(findSmallest())
                                
                                let i = 1;
                                let busses = data.buslist;
                                let table = document.getElementById('busTable');
                                let item = document.getElementById('star-selector');
                            table.setAttribute('id', 'myTable'); // Set an ID for the table
                                console.log(busses.length)
                                console.log(starredBussesArray.length)
                                for(var v = starredBussesArray.length - 1; v>=0; v--){
                          while(i < busses.length + 1) { // busses[i]

                            smallestBus = data.buslist[0].number;
                            highestBus = data.buslist[busses.length - 1].number
                        
                            let row = table.rows[i];
                                    var initelement = row.cells[0]
                                    var intValue = parseInt(initelement.textContent.trim(), 10);

                                    if(intValue == starredBussesArray[v]){
                                        const table = row.parentNode.parentNode;
                                        console.log(table)
                                        console.log(starredBussesArray[v])
                                        starredBusses.add(starredBussesArray[v])
                                        console.log(starredBusses);
                                        starredBussesArray.pop();

                                        var element = row.cells[4].querySelector('span.starring');
                                        
                                        element.style.backgroundColor = 'yellow';
                                        element.style.border = '2px solid black';
                                        
                                        //table.insertBefore(row, row.firstChild);
                                        let tbody = table.querySelector('tbody');
                            tbody.insertBefore(row, tbody.children[1]);


                                    }
                                    i++;
                            }
                            i = 1;
                                }


                            }});
              
                           
            

            

          /*  for(var v = starredBussesArray.length - 1; v>=0; v--){

                starredBusses.add(starredBussesArray[v]);
                const busRows = document.querySelectorAll('bus-table tr:not(:first-child)'); // Exclude the first row (header)
                console.log(busRows)
                busRows.forEach(row => {
                    const busNumber = parseInt(row.cells[0].textContent.trim()); // Assuming bus number is in the first cell
                    console.log(busNumber)
                    const starringButton = row.querySelector('.starring'); // Assuming each row has a starring button
                    // Check if the bus is starred
                    if (starredBussesArray.includes(busNumber)) {
                        // Apply starred styles to the button
                        starringButton.style.backgroundColor = 'yellow';
                        starringButton.style.border = '2px solid black';
                        console.log(starringButton.style.border)
                    } else {
                        // Apply unstarred styles to the button
                        starringButton.style.backgroundColor = 'white';
                        starringButton.style.border = '1px solid black';
                    }
                });*/
     
                                   /* let i = 0;
            
                        
                                let busses = data.buslist;
                                let table = document.getElementById('busTable');
                                let item = document.getElementById('star-selector');
            



                                while(i < busses.length) {
                                    let row = table.rows[i];
                                    var initelement = row.cells[0]
                                    var intValue = parseInt(initelement.textContent.trim(), 10);

                                    if(intValue == starredBussesArray[v]){
                                        starredBusses.add(starredBussesArray[v])
                                        starredBussesArray.pop();

                                        var element = row.cells[4].querySelector('span.starring');
                                        
                                        element.style.backgroundColor = 'yellow';
                                        element.style.border = '2px solid black';
                                        
                                        table.insertBefore(row, table.firstChild.nextSibling);


                                    }
                                }*/




                           // }
                     



                

            
            
    });

            var starredBusses = new Set([]);
            var lowestBus = 0;
            var factor = 10000;
            var highestBus = 0;
            
            
            let table = document.getElementById('busTable');
            
            var tabelElement = table.rows.cells[0]
            var tableValue = parseInt(tableElement.textContent.trim(), 10);
            console.log(tabelValue)

            


         
            
            function getCookie(name) {
                const cookieString = document.cookie;
                const cookies = cookieString.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    // Check if this cookie contains the name we're looking for
                    if (cookie.startsWith(name + '=')) {
                        // If it does, return the cookie value
                        return cookie.substring(name.length + 1);
                    }
                }
                // If the cookie with the specified name is not found, return null
                return null;
            }
            
            function updateCookie() {
                // Convert starredBusses set to an array and then to a string
                const starredBussesArray = Array.from(starredBusses);
                const starredBussesString = JSON.stringify(starredBussesArray);
                // Set the cookie with the name 'starredBusses' and the value as the stringified array
                // NEW CHNAGE -- not in ORIGINAL STARRED BUSSES
                const expirationDate = new Date();
                expirationDate.setFullYear(expirationDate.getFullYear() + 10); // 10 years from now

                //for local host below
                document.cookie = `starredBusses=${starredBussesString}; expires=${expirationDate.toUTCString()}; SameSite=None; Secure;`;
                //     for dev:           document.cookie = `starredBusses=${starredBussesString}; expires=${expirationDate.toUTCString()}; SameSite=None; Secure; domain=https://bus-dev.redhawks.us/`;

                console.log('starredBusses cookie value:', starredBussesString);
       
                    console.log(starredBussesArray)
            }

            function getStarredBussesArray(starredBussesString) {
                 // Parse the JSON string to convert it back to an array
            }
            

            //updates the bustable after reciving the message from ws
            function updateTable(message){
                let busses = message;
                fetch('/getbus')
                        .then(response => { 
                            if(response.ok) {
                                return response.json(); // not important
                            }
                        }).then(data => {
                            if(data) {
                if(busses){
                    let table = document.getElementById('busTable');
                    if(table){       
                        for(let i = 1; i <= busses.length+1; i++){
                            console.log(table.rows);
                            let row = table.rows[i];
                            if(row){
                                row.cells[0].innerHTML = busses[i-1].number;
                                row.cells[1].innerHTML = busses[i-1].change;
                                row.cells[2].innerHTML = busses[i-1].status;
                                row.cells[3].innerHTML = busses[i-1].timestamp;
                                
                                
                            }
                            if(starredBusses.has(tableValue)){
                                starredBusses.delete(tableValue);
                                starred();

                            }
                            }
                            console.log("Bus Table updated");
                        }
                    else{
                        console.log("No table 'busTable' found");
                        }

                }else{
                    console.error("Invalid data recived from websocket:" ,message);
                }}});
            }   

            
            
            function updateStarredUI() {
                




                const row1 = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                    var element = row1.cells[4].querySelector('span.starring');
                    
                    element.style.backgroundColor = 'yellow';
                    element.style.border = '2px solid black';
                    


                    var table = document.createElement('table');
                            table.setAttribute('id', 'myTable'); // Set an ID for the table
                        fetch('/getbus')
                        .then(response => { 
                            if(response.ok) {
                                return response.json(); // not important
                            }
                        }).then(data => {
                            if(data) {

                                let i = 0;
            
                        
                                let busses = data.buslist;
                                let table = document.getElementById('busTable');
                                let item = document.getElementById('star-selector');
                                

            

                                while(i < busses.length) { // busses[i]
                                    let row = table.rows[i];
                                    var initelement = row.cells[0]
                                    var intValue = parseInt(initelement.textContent.trim(), 10);
                                    
                                    if(starredBussesString.has(intValue)){
                                        table.insertBefore(row, table.firstChild.nextSibling);

                                        console.log('lol')
                                    }
                                    
                                 }
                        }});
            }



            
            
            
            function makeTable() {

            var table = document.createElement('table');

            table.setAttribute('id', 'myTable'); // Set an ID for the table
            fetch('/getbus')
            .then(response => { 
            if(response.ok) {
                return response.json(); // not important
            }
            }).then(data => {
            if(data) { // if there is data
                let i = 0;


                let busses = data.buslist;
                let table = document.getElementById('busTable');
                let item = document.getElementById('star-selector');
                console.log("bus table:" + table);

                while(i < busses.length) { // busses[i]
                    let row = table.insertRow(-1);
                
                    row.insertCell(0).innerHTML = busses[i].number;
                    row.insertCell(1).innerHTML = busses[i].change;
                    row.insertCell(2).innerHTML = busses[i].status;
                    row.insertCell(3).innerHTML = busses[i].timestamp;
                    row.insertCell(4).innerHTML = "<span id = 'star-selector' class='e-icons e-medium e-star-filled starring'></span>";

                    row.addEventListener('click', function(event){

                        starred();
                    });


        i++;


   
        
    }

    
}
});


}




            
                   
            
                        function fetchBusses() {
                        fetch('/getbus')
                        .then(response => { 
                            if(response.ok) {
                                return response.json(); // not important
                            }
                        }).then(data => {
                            if(data) { // if there is data
                                let i = 1;
                                let busses = data.buslist;
                                let table = document.getElementById('busTable');
                                let item = document.getElementById('star-selector');
                                
            
                                while(i < busses.length) { // busses[i]
                                    //console.log(i);
                                    //console.log("Busses.length: " + busses.length);
                                    let row = table.rows[i];
                                    row.cells[0].innerHTML = busses[i-1].number;
                                    row.cells[1].innerHTML = busses[i-1].change;
                                    row.cells[2].innerHTML = busses[i-1].status;
                                    row.cells[3].innerHTML = busses[i-1].timestamp;
                                    
                                    
                                    
                                    if(starredBusses.has(tableValue)){
                                        starredBusses.delete(tableValue);
                                        starred();
            
                                    }
                    
            
                                      
                                    i++;
                                    //console.log("i: "+ i);
                                }
                                item.classList.add('starred-factor');
             
                                      
                                
                                
                            }
                        });
                    }
                    </script>
        <table id="busTable"  class="bus-table">
            <tr>
                <th>Bus Number</th> 
                <th>Bus Changes</th>
                <th>Current Status</th>
                <th>Time</th>
                <th></th>
            </tr>

        </table>

        <p style="text-align: center; color: grey;"><small>Version 1 Created by Simi Kama ('23), Adesh Kumar ('23), Theodore Ng ('23), </small><small onclick="hmm()">Alex Remiasz ('23), </small><small> and Boris Rokhmanov ('23)<br>
        <small>Version 2 Created by Vinay Narahari ('24), Tyler Browning ('24), and Peter Paik ('24)</small><br>
        <small>Version 3 Created by Ryan Keough ('25), Priya Agrawal ('25), and Andy Liang ('26)</small></p>
        <script>
            const socket = new WebSocket("ws://localhost:3000"); // Connect to WebSocket server

            socket.addEventListener("open", () => {
            console.log("Connected to WebSocket server");
            });

            // Listen for messages from the server
            socket.addEventListener('message', (event) => {
            console.log('WebSocket message received:', event.data);
        
            // Parse the received data
            let data;
            try {
            data = JSON.parse(event.data);
            } catch (e) {
            console.error('Error parsing WebSocket message:', event.data);
            return;
            }
        
            // Update the buses if buslist is included in the message
            if (data.buslist) {
                updateTable(); // Renders updated bus list
            }
            });

        </script>
        <script>
        function updateTable() {
            let table = document.getElementById('myTable');
            if (!table) {
                console.error('Table with id "busTable" not found!');
                return;
            }

            // Clear existing rows except for the header
            while (table.rows.length > 1) {
                table.deleteRow(1);
            }

            fetch('/getbus')
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                })
                .then(data => {
                    if (data) {
                        let busses = data.buslist;

                        for (let i = 0; i < busses.length; i++) {
                            let row = table.insertRow(-1);

                            row.insertCell(0).innerHTML = busses[i].number;
                            row.insertCell(1).innerHTML = busses[i].change;
                            row.insertCell(2).innerHTML = busses[i].status;
                            row.insertCell(3).innerHTML = busses[i].timestamp;
                            row.insertCell(4).innerHTML = "<span id='star-selector' class='e-icons e-medium e-star-filled starring'></span>";

                            row.addEventListener('click', function(event) {
                                starred();
                            });
                        }
                    }
                });
        }
        </script>
        <script>
            makeTable();
            var smallestBus = 0;
            



            function starred(){ //add isStarred
                findSmallest();
                findHighest();
                console.log(starredBusses + "**************")
                const buttons = document.querySelectorAll('.starring');
                const clickedButton = event.target;
                console.log(clickedButton)
                const row = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                console.log(row)
                var initelement = row.cells[0]
                var intValue = parseInt(initelement.textContent.trim(), 10);
                const table = row.parentNode; // Get the table element
                console.log(intValue)
                let noOtherStars = false;



                



                if(!(starredBusses.has(intValue))){
                    starredBusses.add(intValue);
                    //Vinay is here!!
                    fetch('/getbus')
                        .then(response => { 
                        if(response.ok) {
                            return response.json(); // not important
                        }
                        }).then(data => {

                            if(starredBusses.size == data.buslist.length){
                                document.querySelector('h1').textContent = "Is Starring Done?";
                            }
                        })


                    updateCookie();
                    const row1 = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                    var element = row1.cells[4].querySelector('span.starring');
                    
                    element.style.backgroundColor = 'yellow';
                    element.style.border = '2px solid black';
                    
                    table.insertBefore(row, table.firstChild.nextSibling);
                }else {

                    let check = false;
                    let v = 0;
                    
                    while(!check && v < table.rows.length) { // busses[i]{
                        
                        if(table.rows[v] == null){
                            var initelement1 = null;
                        }else{
                            let rowint = table.rows[v]; 
                            var initelement1 = rowint.cells[0];
                            var intValue1 = parseInt(initelement1.textContent.trim(), 10);
                            console.log("(((((((((" + intValue1)
                        }
                    
                        findSmallest()
                        
                        console.log(intValue1)
                        console.log(intValue)
                        console.log(smallestBus)
                        console.log( parseInt(table.rows[v+1].cells[0].textContent.trim(), 10)) // === undefined)

                        if(intValue === smallestBus){
                            check = true;
                        }else if(intValue === highestBus){
                            check = true;
                        }else if(!(starredBusses.has(intValue1)) || isNaN(parseInt(table.rows[v+1].cells[0].textContent.trim(), 10))){
                           console.log(parseInt(table.rows[v+1].cells[0].textContent.trim(), 10))
                            let rowint1 = table.rows[v+1]; 
                            var initelement2 = rowint1.cells[0];
                            var intValue2 = parseInt(initelement2.textContent.trim(), 10);

                            if(intValue1 < intValue && intValue < intValue2){
                                check = true;
                                console.log(intValue1);
                            }
                      //  v++;
                            
                        }else{
                            check =  true;
                            noOtherStars = true;

                        


                        }// CASE SHOULD BE SET AFTER FIXING CURRENT STARRING ISSUE
                        v++;

                    }

                    

                        const rowReference = table.rows[v];
                        console.log(rowReference)
                    
                    


                    starredBusses.delete(intValue)
                    updateCookie();
                    console.log()
                    //table.insertBefore(row, rowReference.nextSibling);
            
                    if(noOtherStars||intValue == highestBus){
                        table.appendChild(row);
                    }else{
                        rowReference.insertAdjacentElement('beforebegin', row);

                    }


                    const row1 = clickedButton.parentNode.parentNode; // Get the row associated with the clicked button
                    
                    var element = row1.cells[4].querySelector('span.starring');
                    
                    element.style.backgroundColor = 'white';
                    element.style.border = '1px solid black';

                // console.log(location.reload())
                    //location.reload();




            
        }
            }

        
            /*/*else{
                            check = true;
                            noOtherStars = true;
                        } CASE SHOULD BE SET AFTER FIXING CURRENT STARRING ISSUE*/
                      //  v++;
            
            function getRandomInt(max) {
                return Math.floor(Math.random() * max);
            }
            function hmm() {
                let c1 = getRandomInt(255)
                let c2 = getRandomInt(255)
                let c3 = getRandomInt(255)
                document.body.style.backgroundColor = "rgb("+(c1+50)+", "+(c2+50)+", "+(c3+50)+")"
                document.getElementById('navbar').style.backgroundColor = "rgb("+c1+", "+c2+", "+c3+")"
                document.querySelectorAll('th').forEach(cell=>{
                    cell.style.backgroundColor = "rgb("+c1+", "+c2+", "+c3+")"
                })
                document.querySelectorAll('tr').forEach(cell=>{
                    cell.onmouseover = function() {
                        c1 = getRandomInt(255)
                        c2 = getRandomInt(255)
                        c3 = getRandomInt(255)
                        cell.style.backgroundColor = "rgb("+c1+", "+c2+", "+c3+")"
                    }
                })
            }


            function findSmallest() {
                fetch('/getbus')
                .then(response => { 
                    if(response.ok) {
                        return response.json(); // not important
                    }
                    }).then(data => {
                    if(data) { // if there is data
                        smallestBus = data.buslist[0].number;
                        console.log(smallestBus)
                
                    }
                }).catch(err => console.error(err));
            }

            function findHighest() {
                fetch('/getbus')
                .then(response => { 
                    if(response.ok) {
                        return response.json(); // not important
                    }
                    }).then(data => {
                    if(data) { // if there is data
                        var num = 0;
                        var i =0;
                        while(i<data.buslist.length){
                            if(data.buslist[i].number > num){
                                highestBus = data.buslist[i].number;
                            }
                            i++;
                        }
                
                    }
                }).catch(err => console.error(err));
            }


           // document.addEventListener('DOMContentLoaded', function() {

//starred();

        </script>
        <!-- Google sign in script-->
        <script src="https://accounts.google.com/gsi/client" async defer></script>

        
    </body>
</html>